apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
//def enableProguardInReleaseBuilds = false //调试时放开
def enableProguardInReleaseBuilds = true //发布配置

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.yammusicplayer"
    defaultConfig {
        applicationId "com.yammusicplayer"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        //multiDexEnabled true 
        missingDimensionStrategy 'react-native-camera', 'mlkit'
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            keyAlias 'yampubkey' //别名
            keyPassword '123456' //密钥密码 之前设置秘钥口令
            storeFile file('app.keystore') //my-release-key.keystore文件的绝对路径
            storePassword '123456' //存储密码
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            //ndk {
                //这里其实我觉可以直接是用"armeabi-v7a"，但国内几个大哥之前使用的都是"armeabi"
                //abiFilters "armeabi", "armeabi-v7a"
            //}
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            //ndk {
                //这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器回报错
                //abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'armeabi',  'mips', 'mips64'
            //}
        }
    }
    /*splits {
        abi {
            enable true
            reset()
            //添加缺少的cpu对应的类型即可
            include 'armeabi','x86', 'armeabi-v7a','x86_64','arm64-v8a', 'mips', 'mips64'
            //include 'x86'
            universalApk false
        }
    }*/
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    //implementation 'com.android.support:multidex:1.0.3'
    //implementation("com.facebook.soloader:soloader:0.11.0+")
    implementation project(':react-native-fs')
    implementation("com.facebook.react:react-android")
    implementation project(':react-native-camera')

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
    iconFontNames: [ 'AntDesign.ttf',
                     'Entypo.ttf',
                     'EvilIcons.ttf',
                     'Feather.ttf',
                     'FontAwesome.ttf',
                     'FontAwesome5_Brands.ttf',
                     'FontAwesome5_Regular.ttf',
                     'FontAwesome5_Solid.ttf',
                     'FontAwesome6_Brands.ttf',
                     'FontAwesome6_Regular.ttf',
                     'FontAwesome6_Solid.ttf',
                     'Fontisto.ttf',
                     'Foundation.ttf',
                     'Ionicons.ttf',
                     'MaterialCommunityIcons.ttf',
                     'MaterialIcons.ttf',
                     'Octicons.ttf',
                     'SimpleLineIcons.ttf',
                     'Zocial.ttf'
                   ] // 指定要使用的字体库
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
